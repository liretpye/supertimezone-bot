"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("./base");
const message_1 = require("../helpers/formatters/message");
class Chat extends base_1.APIModule {
    constructor() {
        super(...arguments);
        this.delete = (channel, ts, options = {}) => this.request('delete', Object.assign({ channel, ts }, options));
        this.meMessage = (channel, text) => this.request('meMessage', { channel, text });
        this.postEphemeral = (channel, message, options = {}) => this.request('postEphemeral', Object.assign({ channel, asUser: true }, options, message_1.toSlack(message)));
        this.postMessage = (channel, message, options = {}) => this.request('postMessage', Object.assign({ channel, asUser: true }, options, message_1.toSlack(message)))
            .then((_a) => {
            var { message: m } = _a, rest = __rest(_a, ["message"]);
            return (Object.assign({ message: message_1.fromSlack(m) }, rest));
        });
        this.update = (channel, ts, message) => this.request('update', Object.assign({ channel, ts, asUser: true, parse: 'none' }, message_1.toSlack(message)));
    }
}
exports.Chat = Chat;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvY2hhdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLGlDQUFrQztBQUdsQywyREFBa0U7QUFJbEUsVUFBa0IsU0FBUSxnQkFBUztJQUFuQzs7UUFDRSxXQUFNLEdBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBVSxFQUFFLFVBQWdDLEVBQUUsRUFBc0IsRUFBRSxDQUMvRixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsa0JBQUksT0FBTyxFQUFFLEVBQUUsSUFBSyxPQUFPLEVBQUcsQ0FBQTtRQUVyRCxjQUFTLEdBQUcsQ0FBQyxPQUFlLEVBQUUsSUFBWSxFQUFzQixFQUFFLENBQ2hFLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7UUFFOUMsa0JBQWEsR0FBRyxDQUFDLE9BQWUsRUFBRSxPQUFnQixFQUFFLFVBQTBCLEVBQUUsRUFBa0MsRUFBRSxDQUNsSCxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsa0JBQUksT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLElBQUssT0FBTyxFQUFLLGlCQUFPLENBQUMsT0FBTyxDQUFDLEVBQUcsQ0FBQTtRQUUzRixnQkFBVyxHQUFHLENBQUMsT0FBZSxFQUFFLE9BQWdCLEVBQUUsVUFBMEIsRUFBRSxFQUNoQyxFQUFFLENBQzlDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxrQkFBSSxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksSUFBSyxPQUFPLEVBQUssaUJBQU8sQ0FBQyxPQUFPLENBQUMsRUFBRzthQUNwRixJQUFJLENBQUMsQ0FBQyxFQUF1QixFQUFFLEVBQUU7Z0JBQTNCLEVBQUUsT0FBTyxFQUFFLENBQUMsT0FBVyxFQUFULDhCQUFPO1lBQU8sTUFBTSxDQUFOLGlCQUFHLE9BQU8sRUFBRSxtQkFBUyxDQUFDLENBQUMsQ0FBQyxJQUFLLElBQUksRUFBRyxDQUFBO1NBQUEsQ0FBQyxDQUFBO1FBRTVFLFdBQU0sR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFVLEVBQUUsT0FBZ0IsRUFBRSxFQUFFLENBQ3pELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxrQkFBSSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sSUFBSyxpQkFBTyxDQUFDLE9BQU8sQ0FBQyxFQUFHLENBQUE7SUFDN0YsQ0FBQztDQUFBO0FBakJELG9CQWlCQyJ9