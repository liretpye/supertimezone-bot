import { Bot } from '@xene/core';
import { SlackbotDispatcher } from './dispatcher';
import { Message } from './types';
import { Auth, RTM, Chat, Users, Groups, Channels, Files } from './api';
export declare class Slackbot extends Bot<string | Message> {
    /**
     * Default dispatcher, used when user didn't provide
     * custom dispatcher. This is mostly used when user has
     * one type of bot, which is a common case
     */
    static dispatcher: SlackbotDispatcher;
    static middleware: (handler: (context: {
        readonly token: string;
        readonly callbackId: string;
        readonly responseUrl: string;
        readonly user: {
            id: string;
            name: string;
        };
        readonly team: {
            id: string;
            domain: string;
        };
        readonly channel: {
            id: string;
            name: string;
        };
        readonly action: {
            value: string;
            type: "select" | "button";
            id: string;
        };
        message: Message;
        ephemeral: string | Message;
    }) => void | Promise<void>) => (...args: any[]) => Promise<any>;
    static oauthAccess: typeof Auth.access;
    id: string;
    bot: {
        id: string;
        name: string;
    };
    rtm: RTM;
    auth: Auth;
    chat: Chat;
    users: Users;
    groups: Groups;
    channels: Channels;
    files: Files;
    constructor(options: {
        id?: string;
        botToken: string;
        appToken?: string;
        dispatcher?: SlackbotDispatcher;
    });
    say(channel: string, message: string | Message): Promise<{
        channel: string;
        ts: string;
    } & {
        message: Message;
    }>;
    listen(): this;
    /**
     * Process incoming interactive messages
     * like button actions from slack
     * Called from Dispatcher
     */
    onInteractiveMessage(payload: any): Promise<Message>;
    /**
     * Process new incoming RTM messages
     */
    private onRtmMessage(payload);
    private markActionSelected(action, attachment);
}
