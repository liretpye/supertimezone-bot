"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ee_1 = require("./ee");
const parse_1 = require("./actions/parse");
const pause_1 = require("./actions/pause");
const question_1 = require("./actions/question");
const isPause = (p) => p instanceof pause_1.Pause;
const isParse = (p) => p instanceof parse_1.Parse;
const isQuestion = (q) => q instanceof question_1.Question;
class Manager {
    constructor(_bot, _channelID, users) {
        this._bot = _bot;
        this._channelID = _channelID;
        this.users = users;
        /** @internal */
        this._ee = new ee_1.EventEmitter();
        this.emit = this._ee.emit;
        this.on = this._ee.on;
        this._queue = [];
        this._messages = [];
        this._channel.bind(this);
    }
    /**
     * For questions call to ask is required and so it
     * should be just added to the end of queue until
     * previous question/parsers finish.
     *
     * For Parser there no need to prepare it
     * and it's possible just to parse last message
     * since it may contain info parser tries to get
     * (unlike questions, which need to ask question
     * before parsing). So call to parse here will do
     * almost the same thing as in perform but without
     * triggering error hander of parser to not mess
     * up with queue. If it fails then same flow applied
     * as for question e.g. add to queue.
     */
    add(action) {
        if (isQuestion(action) || isPause(action)) {
            this._queue.push(action);
            return this._channel.add(this);
        }
        if (this._lastMessage && action.perform(this._lastMessage))
            return;
        else
            this._queue.push(action);
        if (!this._queue.some(isQuestion))
            this._channel.add(this);
    }
    prepare() {
        if (isQuestion(this._head))
            this._head.ask();
        else if (isPause(this._head))
            return;
        else
            this._head.failed(this._lastMessage);
    }
    perform(message) {
        this.emit('incomingMessage', message);
        this._messages.push(message);
        if (this._isEmpty)
            return true;
        if (!this._head.perform(message)) {
            this._head.failed(message);
            return false;
        }
        this._queue.shift();
        if (isQuestion(this._head))
            return true;
        else
            return this.perform(message);
    }
    unpause() {
        this._queue = this._queue.filter(p => !isPause(p));
    }
    abort() {
        this.emit('abort');
    }
    unbind() {
        this._channel.without(this);
    }
    get _lastMessage() { return this._messages[this._messages.length - 1]; }
    get _channel() { return this._bot._channelFor(this._channelID); }
    get _isEmpty() { return this._queue.length === 0; }
    get _head() { return this._queue[0]; }
}
exports.Manager = Manager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsNkJBQW1DO0FBRW5DLDJDQUF1QztBQUN2QywyQ0FBdUM7QUFFdkMsaURBQTZDO0FBRTdDLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFpQixDQUFDLFlBQVksYUFBSyxDQUFBO0FBQ3JELE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFpQixDQUFDLFlBQVksYUFBSyxDQUFBO0FBQ3JELE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQyxLQUFvQixDQUFDLFlBQVksbUJBQVEsQ0FBQTtBQUU5RDtJQVNFLFlBQ1UsSUFBUyxFQUNULFVBQWtCLEVBQ25CLEtBQWU7UUFGZCxTQUFJLEdBQUosSUFBSSxDQUFLO1FBQ1QsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUNuQixVQUFLLEdBQUwsS0FBSyxDQUFVO1FBWHhCLGdCQUFnQjtRQUNoQixRQUFHLEdBQUcsSUFBSSxpQkFBWSxFQUFFLENBQUE7UUFDeEIsU0FBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFBO1FBQ3BCLE9BQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQTtRQUVSLFdBQU0sR0FBYSxFQUFFLENBQUE7UUFDckIsY0FBUyxHQUFrQixFQUFFLENBQUE7UUFPbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDMUIsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7OztPQWNHO0lBQ0gsR0FBRyxDQUFDLE1BQWM7UUFDaEIsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDeEIsTUFBTSxDQUFDLElBQUks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