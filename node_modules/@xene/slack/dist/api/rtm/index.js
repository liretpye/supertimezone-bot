"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const WebSocket = require("ws");
const eventemitter3_1 = require("eventemitter3");
const base_1 = require("../base");
const logger_1 = require("../../logger");
const PING_INTERVAL = 5000;
const MAX_PONG_INTERVAL = 20000;
const boundPromise = () => {
    const result = {};
    result.promise = new Promise((resolve, reject) => {
        result.resolve = resolve;
        result.reject = reject;
    });
    return result;
};
class RTM extends base_1.APIModule {
    constructor(token) {
        super(token);
        this.inc = 1;
        this.ee = new eventemitter3_1.EventEmitter();
        this.lastPong = 0;
        this.connect = () => __awaiter(this, void 0, void 0, function* () {
            const promise = boundPromise();
            const response = yield this.request('connect');
            this.ws = new WebSocket(response.url);
            this.ws.on('message', this.emit.bind(this));
            this.ws.on('close', this.reconnect.bind(this));
            this.ws.on('open', () => promise.resolve(response));
            return promise.promise;
        });
        this.on = this.ee.addListener.bind(this.ee);
        this.off = this.ee.removeListener.bind(this.ee);
    }
    typing(channel) {
        this.wsSend({ type: 'typing', channel });
    }
    emit(msgString) {
        const msg = JSON.parse(msgString);
        if (msg.type === 'hello')
            this.handleHello();
        if (msg.type === 'pong')
            this.lastPong = Date.now();
        logger_1.logger.verbose('Incoming RTM message %s', msg.type);
        this.ee.emit(msg.subtype ? `${msg.type}.${msg.subtype}` : msg.type, msg);
    }
    handleHello() {
        this.lastPong = Date.now();
        if (this.pingTimer)
            clearInterval(this.pingTimer);
        this.pingTimer = setInterval(this.pingServer.bind(this), PING_INTERVAL);
    }
    reconnect() {
        logger_1.logger.verbose('Reconnecting to RTM API');
        this.disconnect();
        this.connect();
    }
    disconnect() {
        clearInterval(this.pingTimer);
        this.pingTimer = undefined;
        if (!this.ws)
            return;
        this.ws.removeAllListeners('close');
        this.ws.close();
    }
    pingServer() {
        const pongInterval = Math.abs(Date.now() - this.lastPong - PING_INTERVAL);
        if (pongInterval > MAX_PONG_INTERVAL)
            return this.reconnect();
        this.wsSend({ type: 'ping' });
    }
    wsSend(message) {
        this.ws.send(JSON.stringify(Object.assign({}, message, { id: this.inc })));
        this.inc += 1;
    }
}
exports.RTM = RTM;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXBpL3J0bS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsZ0NBQStCO0FBQy9CLGlEQUE0QztBQUU1QyxrQ0FBbUM7QUFDbkMseUNBQXFDO0FBR3JDLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQTtBQUMxQixNQUFNLGlCQUFpQixHQUFHLEtBQUssQ0FBQTtBQUUvQixNQUFNLFlBQVksR0FBRyxHQUE4RSxFQUFFO0lBQ25HLE1BQU0sTUFBTSxHQUFHLEVBQVMsQ0FBQTtJQUN4QixNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQy9DLE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3hCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO0lBQ3hCLENBQUMsQ0FBQyxDQUFBO0lBQ0YsTUFBTSxDQUFDLE1BQU0sQ0FBQTtBQUNmLENBQUMsQ0FBQTtBQUVELFNBQWlCLFNBQVEsZ0JBQVM7SUFTaEMsWUFBWSxLQUFLO1FBQ2YsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBUE4sUUFBRyxHQUFXLENBQUMsQ0FBQTtRQUVmLE9BQUUsR0FBRyxJQUFJLDRCQUFZLEVBQUUsQ0FBQTtRQUV2QixhQUFRLEdBQUcsQ0FBQyxDQUFBO1FBUXBCLFlBQU8sR0FBRyxHQUFTLEVBQUU7WUFDbkIsTUFBTSxPQUFPLEdBQUcsWUFBWSxFQUFFLENBQUE7WUFDOUIsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1lBQzlDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ3JDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxJQUFJ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