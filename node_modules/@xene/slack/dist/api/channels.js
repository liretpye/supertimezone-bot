"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fp_1 = require("lodash/fp");
const base_1 = require("./base");
const get_1 = require("../helpers/get");
class Channels extends base_1.APIModule {
    constructor() {
        super(...arguments);
        this.archive = (channel) => this.request('archive', { channel });
        this.create = (name, validate = false) => this.request('create', { name, validate }).then(get_1.get('channel'));
        this.history = (channel, options) => this.request('history', Object.assign({ channel }, options)).then(get_1.get('messages'));
        this.info = (channel) => this.request('info', { channel }).then(get_1.get('channel'));
        this.invite = (channel, user) => this.request('invite', { channel, user }).then(get_1.get('channel'));
        this.join = (channel) => this.request('join', { name: channel }).then(get_1.get('channel'));
        this.kick = (channel, user) => this.request('kick', { channel, user });
        this.leave = (channel) => this.request('leave', { channel });
        this.list = () => this.request('list').then(get_1.get('channels'));
        this.mark = (channel, ts) => this.request('mark', { channel, ts });
        this.rename = (channel, name, validate = true) => this.request('rename', { channel, name, validate }).then(get_1.get('channel'));
        this.replies = (channel, threadTs) => this.request('rename', { channel, threadTs }).then(get_1.get('messages'));
        this.setPurpose = (channel, purpose) => this.request('setPurpose', { channel, purpose });
        this.setTopic = (channel, topic) => this.request('setTopic', { channel, topic });
        this.unarchive = (channel) => this.request('unarchive', { channel });
        this.getMessage = (channel, ts) => this.history(channel, { inclusive: true, count: 1, latest: ts }).then(fp_1.head);
    }
}
exports.Channels = Channels;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbm5lbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBpL2NoYW5uZWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0NBQWdDO0FBRWhDLGlDQUFrQztBQUNsQyx3Q0FBb0M7QUFJcEMsY0FBc0IsU0FBUSxnQkFBUztJQUF2Qzs7UUFDRSxZQUFPLEdBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBRSxDQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUE7UUFFdEMsV0FBTSxHQUFHLENBQUMsSUFBWSxFQUFFLFdBQW9CLEtBQUssRUFBRSxFQUFFLENBQ25ELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQUcsQ0FBVSxTQUFTLENBQUMsQ0FBQyxDQUFBO1FBRTFFLFlBQU8sR0FBRyxDQUFDLE9BQWUsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsa0JBQUksT0FBTyxJQUFLLE9BQU8sRUFBRyxDQUFDLElBQUksQ0FBQyxTQUFHLENBQVksVUFBVSxDQUFDLENBQUMsQ0FBQTtRQUVuRixTQUFJLEdBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBRSxDQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQUcsQ0FBVSxTQUFTLENBQUMsQ0FBQyxDQUFBO1FBRWpFLFdBQU0sR0FBRyxDQUFDLE9BQWUsRUFBRSxJQUFZLEVBQUUsRUFBRSxDQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFHLENBQVUsU0FBUyxDQUFDLENBQUMsQ0FBQTtRQUV6RSxTQUFJLEdBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBRSxDQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFHLENBQVUsU0FBUyxDQUFDLENBQUMsQ0FBQTtRQUV2RSxTQUFJLEdBQUcsQ0FBQyxPQUFlLEVBQUUsSUFBWSxFQUFFLEVBQUUsQ0FDdkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUV6QyxVQUFLLEdBQUcsQ0FBQyxPQUFlLEVBQWlCLEVBQUUsQ0FDekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFBO1FBRXBDLFNBQUksR0FBRyxHQUFHLEVBQUUsQ0FDVixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFHLENBQVksVUFBVSxDQUFDLENBQUMsQ0FBQTtRQUV2RCxTQUFJLEdBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBVSxFQUFFLEVBQUUsQ0FDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUV2QyxXQUFNLEdBQUcsQ0FBQyxPQUFlLEVBQUUsSUFBWSxFQUFFLFdBQW9CLElBQUksRUFBb0IsRUFBRSxDQUNyRixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBRyxDQUFVLFNBQVMsQ0FBQyxDQUFDLENBQUE7UUFFbkYsWUFBTyxHQUFHLENBQUMsT0FBZSxFQUFFLFFBQWdCLEVBQUUsRUFBRSxDQUM5QyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFHLENBQVksVUFBVSxDQUFDLENBQUMsQ0FBQTtRQUVoRixlQUFVLEdBQUcsQ0FBQyxPQUFlLEVBQUUsT0FBZSxFQUFFLEVBQUUsQ0FDaEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUVsRCxhQUFRLEdBQUcsQ0FBQyxPQUFlLEVBQUUsS0FBYSxFQUFFLEVBQUUsQ0FDNUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtRQUU5QyxjQUFTLEdBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBRSxDQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUE7UUFFeEMsZUFBVSxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQVUsRUFBRSxFQUFFLENBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFJLENBQUMsQ0FBQTtJQUMvRSxDQUFDO0NBQUE7QUFoREQsNEJBZ0RDIn0=