"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const qs = require("querystring");
const rawBody = require("raw-body");
const request = require("request-promise-native");
const lodash_1 = require("lodash");
const case_1 = require("../helpers/case");
const format = require("../helpers/formatters/message");
const streamPayload = req => rawBody(req, { encoding: true }).then(qs.parse).then(i => JSON.parse(i.payload));
const existingPayload = payload => typeof payload === 'string' ? JSON.parse(payload) : payload;
const middlewareContext = (payload) => {
    const action = payload.actions[0];
    const { user, team, channel, token, callbackId, responseUrl } = payload;
    return {
        user, team, channel, token, callbackId, ephemeral: undefined, responseUrl,
        message: format.fromSlack(payload.originalMessage),
        action: {
            value: action.type === 'button' ? action.value : action.selectedOptions[0].value,
            type: action.type,
            id: action.name
        }
    };
};
const processRequestWithHandler = (handler, payload) => __awaiter(this, void 0, void 0, function* () {
    const context = middlewareContext(case_1.camel(payload));
    yield handler(context);
    let response;
    const { ephemeral, message } = context;
    const ephemeralAdded = ephemeral != null;
    const deleted = message == null;
    const modified = !deleted && !lodash_1.isEqual(message, format.fromSlack(payload.original_message));
    if (ephemeralAdded && modified)
        throw new Error("Can't show ephemeral message and update original message in the same time.");
    if (modified)
        response = format.toSlack(message);
    if (deleted)
        response = { delete_original: true };
    if (ephemeralAdded) {
        response = lodash_1.isString(ephemeral) ? { text: ephemeral } : format.toSlack(ephemeral);
        response.response_type = 'ephemeral';
        response.replace_original = false;
        response.delete_original = deleted;
    }
    if (!modified && !deleted && !ephemeralAdded)
        return;
    const body = response || payload.original_message;
    request.post({ uri: context.responseUrl, body, json: true });
});
exports.koa = (handler, ctx, next) => __awaiter(this, void 0, void 0, function* () {
    if (ctx.method.toLowerCase() !== 'post')
        return;
    // ctx.request.body hack is to get parsed body
    // if any body parsers middleware is already used in code
    // tslint:disable
    const payload = existingPayload(lodash_1.get(ctx, 'request.body.payload')) || (yield streamPayload(ctx.req));
    processRequestWithHandler(handler, payload);
    ctx.status = 200;
    ctx.body = '';
    return next();
});
exports.express = (handler, req, res, next) => __awaiter(this, void 0, void 0, function* () {
    if (req.method.toLowerCase() !== 'post')
        return;
    const payload = existingPayload(lodash_1.get(req, 'body.payload')) || (yield streamPayload(req));
    processRequestWithHandler(handler, payload);
    res.status(200).end();
    return next();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlkZGxld2FyZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlkZGxld2FyZS9taWRkbGV3YXJlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQ0Esa0NBQWlDO0FBRWpDLG9DQUFtQztBQUNuQyxrREFBaUQ7QUFDakQsbUNBQStDO0FBRS9DLDBDQUF1QztBQUN2Qyx3REFBdUQ7QUFHdkQsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO0FBQzdHLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxPQUFPLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUE7QUFFOUYsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLE9BQU8sRUFBcUIsRUFBRTtJQUN2RCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2pDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxHQUFHLE9BQU8sQ0FBQTtJQUN2RSxNQUFNLENBQUM7UUFDTCxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsV0FBVztRQUN6RSxPQUFPLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDO1FB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