"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const uuid = require("uuid");
const _ = require("lodash");
const core_1 = require("@xene/core");
const dispatcher_1 = require("./dispatcher");
const middleware_1 = require("./middleware");
const is_mentioned_1 = require("./helpers/is-mentioned");
const channel_type_1 = require("./helpers/channel-type");
const api_1 = require("./api");
class Slackbot extends core_1.Bot {
    constructor(options) {
        super();
        this.id = options.id || uuid.v4();
        this.chat = new api_1.Chat(options.botToken);
        this.rtm = new api_1.RTM(options.botToken);
        // Some of these API scopes' methods require additional
        // scopes which are defined only for apps and app tokens respectively
        this.auth = new api_1.Auth(options.appToken || options.botToken);
        this.users = new api_1.Users(options.appToken || options.botToken);
        this.groups = new api_1.Groups(options.appToken || options.botToken);
        this.channels = new api_1.Channels(options.appToken || options.botToken);
        this.files = new api_1.Files(options.appToken || options.botToken);
        if (options.dispatcher)
            options.dispatcher.add(this.id, this);
        else
            Slackbot.dispatcher.add(this.id, this);
    }
    say(channel, message) {
        return __awaiter(this, void 0, void 0, function* () {
            const init = { text: '', attachments: [] };
            message = _.isString(message) ? Object.assign({}, init, { text: message }) : Object.assign({}, init, message);
            message.attachments.forEach(a => a.callbackId = a.callbackId || this.id);
            return this.chat.postMessage(channel, message);
        });
    }
    listen() {
        this.rtm.on('message', this.onRtmMessage.bind(this));
        this.rtm.connect().then(i => this.bot = i.self);
        return this;
    }
    /**
     * Process incoming interactive messages
     * like button actions from slack
     * Called from Dispatcher
     */
    onInteractiveMessage(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const selected = payload.actions[0];
            const text = payload.originalMessage.text;
            let attachments = payload.originalMessage.attachments;
            attachments = attachments.map(this.markActionSelected.bind(this, selected));
            this.onMessage({
                channel: payload.channel.id,
                user: payload.user.id,
                text: selected.value,
                id: payload.ts
            });
            return { text, attachments };
        });
    }
    /**
     * Process new incoming RTM messages
     */
    onRtmMessage(payload) {
        const { user, ts, text, channel } = payload;
        if (this.bot.id === user)
            return;
        const isBotMentioned = is_mentioned_1.isMentioned(this.bot.id, text);
        const isPrivate = channel_type_1.isPrivateChannel(channel);
        if (!isPrivate && !isBotMentioned)
            return;
        this.onMessage({ id: ts, text, user, channel });
    }
    markActionSelected(action, attachment) {
        const selectedReplacer = ':white_check_mark: ' + action.text;
        if (_.find(attachment.actions, ['value', action.value])) {
            const title = attachment.title;
            delete attachment.actions;
            attachment.title = title ? (title + '\n' + selectedReplacer) : selectedReplacer;
        }
        return attachment;
    }
}
/**
 * Default dispatcher, used when user didn't provide
 * custom dispatcher. This is mostly used when user has
 * one type of bot, which is a common case
 */
Slackbot.dispatcher = new dispatcher_1.SlackbotDispatcher();
Slackbot.middleware = middleware_1.middleware;
Slackbot.oauthAccess = api_1.Auth.access;
exports.Slackbot = Slackbot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xhY2tib3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc2xhY2tib3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLDZCQUE0QjtBQUM1Qiw0QkFBMkI7QUFDM0IscUNBQWdDO0FBRWhDLDZDQUFpRDtBQUNqRCw2Q0FBeUM7QUFDekMseURBQW9EO0FBRXBELHlEQUF5RDtBQUd6RCwrQkFBdUU7QUFFdkUsY0FBc0IsU0FBUSxVQUFxQjtJQXNCakQsWUFBWSxPQUtYO1FBQ0MsS0FBSyxFQUFFLENBQUE7UUFDUCxJQUFJLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFBO1FBRWpDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxVQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ3RDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxTQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ3BDLHVEQUF1RDtRQUN2RCxxRUFBcUU7UUFDckUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLFVBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUMxRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksV0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQzVELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxZQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDOUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGNBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUNsRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksV0FBSyxDQUFDLE9BQU8sQ0FB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