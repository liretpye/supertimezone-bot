"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const manager_1 = require("./manager");
const pause_1 = require("./actions/pause");
const parse_1 = require("./actions/parse");
const question_1 = require("./actions/question");
const isMessage = (arg) => arg != null && typeof arg !== 'function';
const errorHandler = (say, arg) => isMessage(arg) ? () => say(arg) : arg;
class Dialog {
    constructor(bot, channel, users) {
        this.isPaused = false;
        this.bot = bot, this.channel = channel, this.users = users;
        this._manager = new manager_1.Manager(bot, channel, users);
        this.parse = this.parse.bind(this);
        this.ask = this.ask.bind(this);
        this.say = this.say.bind(this);
    }
    get user() { return this.users[0]; }
    on(event, callback) {
        this._manager.on(event, callback);
    }
    end() {
        this._manager.emit('end');
        this._manager.unbind();
    }
    pause(message) {
        this.isPaused = true;
        this._manager.emit('pause');
        const handler = () => this.say(message, false);
        this._manager.add(new pause_1.Pause(handler));
    }
    say(message, unpause = true) {
        this._manager.emit('outgoingMessage', this.channel, message);
        if (this.isPaused && unpause) {
            this._manager.unpause();
            this._manager.emit('unpause');
            this.isPaused = false;
        }
        return this.bot.say(this.channel, message);
    }
    parse(parser, onError) {
        const parserObj = new parse_1.Parse(parser, errorHandler(this.say, onError));
        this._manager.add(parserObj);
        return parserObj.promise;
    }
    ask(message, parser, onError) {
        const sayMessage = () => this.say(message);
        const question = new question_1.Question(sayMessage, parser, errorHandler(this.say, onError));
        this._manager.add(question);
        return question.promise;
    }
}
exports.Dialog = Dialog;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RpYWxvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHVDQUFtQztBQUNuQywyQ0FBdUM7QUFDdkMsMkNBQXVDO0FBQ3ZDLGlEQUE2QztBQUc3QyxNQUFNLFNBQVMsR0FBRyxDQUFJLEdBQUcsS0FDdkIsR0FBRyxJQUFJLElBQUksSUFBSSxPQUFPLEdBQUcsS0FBSyxVQUFVLENBQUE7QUFFMUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUM1QixTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFBO0FBRXZDO0lBWUUsWUFBWSxHQUFRLEVBQUUsT0FBZSxFQUFFLEtBQWU7UUFMdEQsYUFBUSxHQUFZLEtBQUssQ0FBQTtRQU12QixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUMxRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksaUJBQU8sQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ2hELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDbEMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUM5QixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ2hDLENBQUM7SUFSRCxJQUFJLElBQUksS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFnQm5DLEVBQUUsQ0FBQyxLQUFhLEVBQUUsUUFBaUM7UUFDakQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFRCxHQUFHO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDekIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUN4QixDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQW1CO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFBO1FBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzNCLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDOUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxhQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtJQUN2QyxDQUFDO0lBRUQsR0FBRyxDQUFDLE9BQW1CLEVBQUUsVUFBbUIsSUFBSTtRQUM5QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQzVELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQztZQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFBO1lBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1lBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFBO1FBQ3ZCLENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUM1QyxDQUFDO0lBT0QsS0FBSyxDQUFJLE1BQW9CLEVBQUUsT0FBK0M7UUFDNUUsTUFBTSxTQUFTLEdBQUcsSUFBSSxhQUFLLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUE7UUFDcEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDNUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUE7SUFDMUIsQ0FBQztJQVFELEdBQUcsQ0FBSSxPQUFtQixFQUFFLE1BQW9CLEVBQUUsT0FBK0M7UUFDL0YsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzFDLE1BQU0sUUFBUSxHQUFHLElBQUksbUJBQVEsQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUE7UUFDbEYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDM0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUE7SUFDekIsQ0FBQztDQUNGO0FBM0VELHdCQTJFQyJ9